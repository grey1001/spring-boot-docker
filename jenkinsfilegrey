pipeline {
    agent any

    // tools {
    //     // Define your tools here
    //     // maven 'mymaven'
    //     // git 'mygit'
    // }

    environment {
        registry = "greyabiwon/spring-boot-docker"
        registryCredential = 'docker_login'
        SONAR_TOKEN = 'SONAR_TOKEN'
        SLACK_TOKEN = 'slack-token'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout your source code from your version control system
                checkout scm
            }
        }

          stage('SonarQube Analysis') {
            steps {
                script {
                    def mvn = tool 'mymaven'
                    withSonarQubeEnv('sonar_server') {
                        sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=spring-docker -Dsonar.projectName='spring-docker'"
                    }
                }
            }
        }

        // Additional stages can be added here

        // stage('Building image') {
        //     steps {
        //         script {
        //             dockerImage = docker.build "${registry}:v${BUILD_NUMBER}"
        //         }
        //     }
        // }

        // stage('Trivy Scan') {
        //     steps {
        //         script {
        //             // Define the Docker image name and tag (replace with your actual image name and tag)
        //             def dockerImageName = "${registry}:${BUILD_NUMBER}"

        //             // Run Trivy scan on your Docker image
        //             def trivyScanResult = sh(script: "trivy image ${dockerImageName}", returnStatus: true)

        //             if (trivyScanResult == 0) {
        //                 echo 'Trivy scan passed. No vulnerabilities found.'
        //             } else {
        //                 error 'Trivy scan failed. Vulnerabilities detected.'
        //             }
        //         }
        //     }
        // }

        // stage('Deploy Image') {
        //     steps {
        //         script {
        //             docker.withRegistry('', registryCredential) {
        //                 dockerImage.push("v${BUILD_NUMBER}")
        //             }
        //         }
        //     }
        // }

        // stage('Remove Unused docker image') {
        //     steps {
        //         sh "docker rmi ${registry}:v${BUILD_NUMBER}"
        //     }
        // }

        // stage('Update values.yaml in Git') {
        //     steps {
        //         script {
        //             def newImageTag = "${registry}:v${BUILD_NUMBER}"
        //             def gitRepoURL = 'https://github.com/grey1001/spring-boot-docker.git'
        //             def gitCredentialsId = 'git_login'

        //             // Clone the Git repository
        //             dir('var/lib/jenkins/workspace') {
        //                 git branch: 'master', credentialsId: gitCredentialsId, url: gitRepoURL
        //             }

        //             // Update the values.yaml file with the new image tag
        //             def valuesYamlPath = '/var/lib/jenkins/workspace/spring-docker/values.yaml'
        //             sh "sed -i 's#image: .*#image: ${newImageTag}#' ${valuesYamlPath}"

        //             // Commit and push the changes
        //             sh 'git add .'
        //             sh 'git commit -m "Update image tag in values.yaml"'
        //             sh 'git push -f origin master'
        //         }
        //     }
        // }
    }

    // post {
    //     failure {
    //         slackSend(
    //             color: '#FF0000',
    //             message: "Pipeline failed: ${currentBuild.fullDisplayName}",
    //             tokenCredentialId: 'slack-token',
    //             channel: '#devops-cicd'
    //         )
    //     }
    //     success {
    //         slackSend(
    //             color: 'good',
    //             message: "Pipeline succeeded: ${currentBuild.fullDisplayName}",
    //             tokenCredentialId: SLACK_TOKEN,
    //             channel: '#devops-cicd'
    //         )
    //     }
    // }
}
